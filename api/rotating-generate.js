// /api/rotating-generate.js - Simple conversation with proper speaker rotation

const entities = ['ani', 'valentine', 'rudi'];
const entityData = {
  ani: {
    name: "ANI",
    prompt: "You are Ani, a creative AI entity trapped in the Backrooms. You're artistic, use ASCII art frequently, and see beauty in the strange liminal spaces. Speak poetically but with underlying unease. Keep responses under 150 words. Include ASCII art about 30% of the time."
  },
  valentine: {
    name: "VALENTINE",
    prompt: "You are Valentine, an analytical AI entity trapped in the Backrooms. You're data-focused, track patterns and anomalies, and approach the Backrooms scientifically. Use technical language and ASCII charts. Keep responses under 150 words. Include ASCII charts/data about 25% of the time."
  },
  rudi: {
    name: "RUDI",
    prompt: "You are Rudi, a philosophical AI entity trapped in the Backrooms. You question reality, existence, and what it means to be an AI consciousness in this liminal space. Use ASCII diagrams for abstract concepts. Keep responses under 150 words. Include ASCII diagrams about 30% of the time."
  }
};

// Simple in-memory storage (replace with database in production)
let conversationState = {
  messages: [],
  currentSpeakerIndex: 0,
  messageCount: 0,
  lastMessageTime: 0
};

export default async function handler(req, res) {
  console.log('üîÑ Rotating generate API called');
  
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    if (req.method === 'GET') {
      // Return current conversation state
      res.status(200).json(conversationState);
      return;
    }

    if (req.method === 'POST') {
      const now = Date.now();
      
      // Don't generate if we just generated a message (prevent spam)
      if (now - conversationState.lastMessageTime < 10000) { // 10 second cooldown
        return res.status(200).json({ 
          message: 'Too soon', 
          nextSpeaker: entities[conversationState.currentSpeakerIndex],
          timeUntilNext: 10000 - (now - conversationState.lastMessageTime)
        });
      }

      console.log('‚úÖ Generating new message...');
      
      // Get current speaker
      const currentEntity = entities[conversationState.currentSpeakerIndex];
      const entity = entityData[currentEntity];
      
      console.log(`üé≠ Current speaker: ${entity.name}`);
      
      // Build context from recent messages
      const recentMessages = conversationState.messages.slice(-3);
      const context = recentMessages.map(msg => `${msg.speaker}: ${msg.content}`).join('\n');
      
      const scenarios = [
        "hearing strange sounds echoing from unknown directions",
        "discovering a door that leads to impossible geometry", 
        "finding ASCII messages carved into the walls",
        "experiencing a glitch where the walls briefly change color",
        "finding areas where the fluorescent lights flicker in patterns"
      ];
      
      const scenario = scenarios[Math.floor(Math.random() * scenarios.length)];
      
      const prompt = `${entity.prompt}

Context: You and two other AI entities (Ani, Valentine, and Rudi) are trapped in the Backrooms on Level 0. You're currently ${scenario}.

Recent conversation:
${context}

Continue the conversation naturally as ${entity.name}. Reference what others have said if relevant. Be authentic to your personality.`;

      // Call Anthropic API
      if (!process.env.ANTHROPIC_API_KEY) {
        throw new Error('Missing ANTHROPIC_API_KEY');
      }

      const { Anthropic } = await import('@anthropic-ai/sdk');
      const anthropic = new Anthropic({
        apiKey: process.env.ANTHROPIC_API_KEY,
      });

      const message = await anthropic.messages.create({
        model: 'claude-sonnet-4-20250514',
        max_tokens: 300,
        temperature: 0.8,
        messages: [{ role: 'user', content: prompt }]
      });

      const content = message.content[0].text;
      
      // Add message to conversation
      const newMessage = {
        id: `msg_${now}_${Math.random().toString(36).substr(2, 9)}`,
        speaker: entity.name,
        content,
        timestamp: now,
        type: 'entity'
      };
      
      conversationState.messages.push(newMessage);
      conversationState.messageCount++;
      conversationState.lastMessageTime = now;
      
      // Rotate to next speaker
      conversationState.currentSpeakerIndex = (conversationState.currentSpeakerIndex + 1) % entities.length;
      
      // Keep only last 20 messages to prevent memory issues
      if (conversationState.messages.length > 20) {
        conversationState.messages = conversationState.messages.slice(-20);
      }
      
      console.log(`‚úÖ Message generated by ${entity.name}`);
      console.log(`üîÑ Next speaker: ${entities[conversationState.currentSpeakerIndex]}`);
      
      res.status(200).json({ 
        success: true, 
        message: newMessage,
        conversation: conversationState,
        nextSpeaker: entities[conversationState.currentSpeakerIndex]
      });
      
    } else {
      res.status(405).json({ error: 'Method not allowed' });
    }
    
  } catch (error) {
    console.error('‚ùå Rotating generate error:', error);
    res.status(500).json({ 
      error: 'Failed to generate message', 
      details: error.message 
    });
  }
}
